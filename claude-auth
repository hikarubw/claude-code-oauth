#!/bin/bash
# Claude Action Auth - CLI tool for Claude Code Action authentication setup (OAuth or API Key)

set -e

# Version
VERSION="2.1.0"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Default action
ACTION=""

# Show help
show_help() {
    echo -e "${BLUE}Claude Action Auth v${VERSION}${NC}"
    echo ""
    echo "Setup authentication for Claude Code Action on GitHub"
    echo ""
    echo "Usage: claude-auth [command] [options]"
    echo ""
    echo "Commands:"
    echo "  init         Configure auth and install workflow (recommended)"
    echo "  setup        Configure authentication only"
    echo "  install      Install workflow only"
    echo "  test         Verify setup"
    echo "  uninstall    Remove configuration"
    echo "  help         Show this help message"
    echo ""
    echo "Options:"
    echo "  --version    Show version information"
    echo "  --oauth      Use OAuth authentication"
    echo "  --api-key    Use API key authentication"
    echo "  --auth-type  Specify auth type: oauth or api (legacy)"
    echo "  --template   Specify workflow template"
    echo ""
    echo "Quick Start:"
    echo "  claude-auth init                    # Interactive setup (recommended)"
    echo "  claude-auth init --oauth            # OAuth with default workflow"
    echo "  claude-auth init --api-key          # API key with default workflow"
    echo ""
    echo "Advanced Examples:"
    echo "  claude-auth init --oauth --template=claude-auto-review.yml"
    echo "  claude-auth setup --auth-type=oauth # Just configure auth"
    echo "  claude-auth install --template=claude.yml # Just install workflow"
}

# Check dependencies
check_dependencies() {
    local missing=()
    
    for cmd in gh jq git; do
        if ! command -v $cmd &> /dev/null; then
            missing+=($cmd)
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        for cmd in "${missing[@]}"; do
            case $cmd in
                gh)
                    echo "  - gh: Install from https://cli.github.com/"
                    ;;
                jq)
                    echo "  - jq: brew install jq (macOS) or apt install jq (Linux)"
                    ;;
                git)
                    echo "  - git: Install from https://git-scm.com/"
                    ;;
            esac
        done
        exit 1
    fi
}

# Get Claude credentials
get_claude_credentials() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - read from Keychain
        echo "Reading credentials from macOS Keychain..."
        
        local creds=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null || echo "{}")
        # Check for nested claudeAiOauth structure first
        if echo "$creds" | jq -e '.claudeAiOauth' >/dev/null 2>&1; then
            ACCESS_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.accessToken // empty')
            REFRESH_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.refreshToken // empty')
            EXPIRES_AT=$(echo "$creds" | jq -r '.claudeAiOauth.expiresAt // empty')
        else
            # Fallback to direct structure
            ACCESS_TOKEN=$(echo "$creds" | jq -r '.access_token // empty')
            REFRESH_TOKEN=$(echo "$creds" | jq -r '.refresh_token // empty')
            EXPIRES_AT=$(echo "$creds" | jq -r '.expires_at // empty')
        fi
    else
        # Linux - read from file
        local cred_file="$HOME/.claude/.credentials.json"
        echo "Reading credentials from $cred_file..."
        
        if [ -f "$cred_file" ]; then
            # Check if file is readable and valid JSON
            if ! jq -e . "$cred_file" >/dev/null 2>&1; then
                echo -e "${YELLOW}Warning: Credentials file exists but appears to be invalid JSON${NC}"
            else
                local creds=$(cat "$cred_file")
                # Check for nested claudeAiOauth structure first
                if echo "$creds" | jq -e '.claudeAiOauth' >/dev/null 2>&1; then
                    ACCESS_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.accessToken // empty')
                    REFRESH_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.refreshToken // empty')
                    EXPIRES_AT=$(echo "$creds" | jq -r '.claudeAiOauth.expiresAt // empty')
                else
                    # Fallback to direct structure
                    ACCESS_TOKEN=$(echo "$creds" | jq -r '.access_token // empty')
                    REFRESH_TOKEN=$(echo "$creds" | jq -r '.refresh_token // empty')
                    EXPIRES_AT=$(echo "$creds" | jq -r '.expires_at // empty')
                fi
            fi
        fi
    fi
    
    if [ -z "$ACCESS_TOKEN" ] || [ -z "$REFRESH_TOKEN" ]; then
        echo -e "${RED}Error: Claude credentials not found${NC}"
        echo ""
        
        # Check if claude command is available
        if ! command -v claude &> /dev/null; then
            echo -e "${YELLOW}Warning: 'claude' command not found${NC}"
            echo "Please install Claude Code first: https://claude.ai/code"
            echo ""
        fi
        
        echo "Please login to Claude first:"
        echo "1. Run 'claude' to start interactive mode"
        echo "2. Use '/login' command to authenticate"
        echo ""
        if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "Expected location: macOS Keychain (Claude Code-credentials)"
        else
            echo "Expected location: ~/.claude/.credentials.json"
        fi
        exit 1
    fi
    
    echo -e "${GREEN}âœ“ Found Claude credentials${NC}"
}

# Ask for auth type
ask_auth_type() {
    echo -e "${BLUE}Choose authentication method:${NC}" >&2
    echo "1) OAuth (recommended) - Uses your Claude login" >&2
    echo "2) API Key - Uses Anthropic API key" >&2
    echo "" >&2
    
    while true; do
        read -p "Select (1-2): " choice
        case "$choice" in
            1)
                echo "oauth"
                return
                ;;
            2)
                echo "api"
                return
                ;;
            *)
                echo -e "${RED}Invalid selection. Please enter 1 or 2.${NC}" >&2
                ;;
        esac
    done
}

# List available templates
list_templates() {
    local auth_type="${1:-}"
    echo -e "${BLUE}Fetching available workflow templates...${NC}"
    echo ""
    
    # Determine which repository to fetch from
    local api_url=""
    if [ "$auth_type" = "oauth" ]; then
        api_url="https://api.github.com/repos/hikarubw/claude-code-action/contents/examples?ref=oauth"
    else
        api_url="https://api.github.com/repos/anthropics/claude-code-action/contents/examples?ref=beta"
    fi
    
    # Fetch the list of templates
    local templates=$(curl -s "$api_url" | jq -r '.[] | select(.name | endswith(".yml")) | .name' 2>/dev/null)
    
    if [ -z "$templates" ]; then
        echo -e "${YELLOW}Using default template list (unable to fetch from repository)${NC}"
        echo ""
        echo "1) claude.yml - Basic Claude workflow (recommended)"
        echo "2) claude-auto-review.yml - Automatic code review on PRs"
        echo "3) claude-pr-path-specific.yml - Path-specific PR review"
        echo "4) claude-review-from-author.yml - Author-initiated review"
        echo "5) claude-advanced.yml - Advanced workflow with full permissions (OAuth only)"
        echo "6) claude-advanced-api.yml - Advanced workflow for API key authentication"
    else
        echo -e "${GREEN}Available templates from repository:${NC}"
        echo ""
        local i=1
        echo "$templates" | while read -r template; do
            echo "$i) $template"
            ((i++))
        done
        
        # Add local advanced templates if they exist
        if [ -f "$HOME/.claude-action-auth/claude-advanced.yml" ]; then
            echo ""
            echo -e "${BLUE}Local advanced templates:${NC}"
            echo "A) claude-advanced.yml - Advanced workflow with full permissions (OAuth only)"
        fi
        if [ -f "$HOME/.claude-action-auth/claude-advanced-api.yml" ]; then
            echo "B) claude-advanced-api.yml - Advanced workflow for API key authentication"
        fi
    fi
    echo ""
}

# Show template list
show_template_list() {
    local auth_type="${1:-}"
    
    echo ""
    echo -e "${BLUE}Fetching available workflow templates...${NC}"
    echo ""
    
    # Determine which repository to fetch from
    local api_url=""
    if [ "$auth_type" = "oauth" ]; then
        api_url="https://api.github.com/repos/hikarubw/claude-code-action/contents/examples?ref=oauth"
    else
        api_url="https://api.github.com/repos/anthropics/claude-code-action/contents/examples?ref=beta"
    fi
    
    # Fetch the list of templates
    local templates=$(curl -s "$api_url" | jq -r '.[] | select(.name | endswith(".yml")) | .name' 2>/dev/null)
    
    if [ -z "$templates" ]; then
        echo -e "${YELLOW}Unable to fetch templates from repository. Using default list:${NC}"
        echo ""
        echo "1) claude.yml - Basic Claude workflow (recommended)"
        echo "2) claude-auto-review.yml - Automatic code review on PRs"
        echo "3) claude-pr-path-specific.yml - Path-specific PR review"
        echo "4) claude-review-from-author.yml - Author-initiated review"
    else
        echo -e "${GREEN}Available templates from repository:${NC}"
        echo ""
        local i=1
        echo "$templates" | while read -r template; do
            # Add description for known templates
            local desc=""
            case "$template" in
                "claude.yml") desc=" - Basic Claude workflow (recommended)" ;;
                "claude-auto-review.yml") desc=" - Automatic code review on PRs" ;;
                "claude-pr-path-specific.yml") desc=" - Path-specific PR review" ;;
                "claude-review-from-author.yml") desc=" - Author-initiated review" ;;
                *) desc="" ;;
            esac
            echo "$i) $template$desc"
            ((i++))
        done
    fi
    
    # Add local advanced templates if they exist
    if [ -f "$HOME/.claude-action-auth/claude-advanced.yml" ] || [ -f "$HOME/.claude-action-auth/claude-advanced-api.yml" ]; then
        echo ""
        echo -e "${BLUE}Local advanced templates:${NC}"
        if [ -f "$HOME/.claude-action-auth/claude-advanced.yml" ]; then
            echo "A) claude-advanced.yml - Advanced workflow with full permissions (OAuth only)"
        fi
        if [ -f "$HOME/.claude-action-auth/claude-advanced-api.yml" ]; then
            echo "B) claude-advanced-api.yml - Advanced workflow for API key authentication"
        fi
    fi
    
    echo ""
}

# Get template selection from user
get_template_selection() {
    local auth_type="${1:-}"
    
    # Determine which repository to fetch from
    local api_url=""
    if [ "$auth_type" = "oauth" ]; then
        api_url="https://api.github.com/repos/hikarubw/claude-code-action/contents/examples?ref=oauth"
    else
        api_url="https://api.github.com/repos/anthropics/claude-code-action/contents/examples?ref=beta"
    fi
    
    # Fetch templates into an array
    local templates_array=()
    local templates_json=$(curl -s "$api_url" 2>/dev/null)
    
    if [ -n "$templates_json" ] && [ "$templates_json" != "null" ] && echo "$templates_json" | jq -e . >/dev/null 2>&1; then
        while IFS= read -r template; do
            templates_array+=("$template")
        done < <(echo "$templates_json" | jq -r '.[] | select(.name | endswith(".yml")) | .name')
    fi
    
    # If no templates fetched, use defaults
    if [ ${#templates_array[@]} -eq 0 ]; then
        templates_array=("claude.yml" "claude-auto-review.yml" "claude-pr-path-specific.yml" "claude-review-from-author.yml")
    fi
    
    while true; do
        read -p "Select template: " choice
        
        # Handle numeric choices
        if [[ "$choice" =~ ^[0-9]+$ ]]; then
            local index=$((choice - 1))
            if [ $index -ge 0 ] && [ $index -lt ${#templates_array[@]} ]; then
                echo "${templates_array[$index]}"
                return
            fi
        fi
        
        # Handle letter choices for local templates
        case "$choice" in
            [Aa])
                if [ -f "$HOME/.claude-action-auth/claude-advanced.yml" ]; then
                    echo "claude-advanced.yml"
                    return
                fi
                ;;
            [Bb])
                if [ -f "$HOME/.claude-action-auth/claude-advanced-api.yml" ]; then
                    echo "claude-advanced-api.yml"
                    return
                fi
                ;;
        esac
        
        echo -e "${RED}Invalid selection. Please try again.${NC}" >&2
    done
}


# Install workflow
install_workflow() {
    local auth_type="${1:-oauth}"
    local template="${2:-}"
    
    echo -e "${BLUE}Installing Claude GitHub Action workflow...${NC}"
    
    mkdir -p .github/workflows
    
    if [ -f ".github/workflows/claude.yml" ]; then
        echo -e "${YELLOW}Backing up existing workflow...${NC}"
        cp .github/workflows/claude.yml .github/workflows/claude.yml.bak
    fi
    
    # If no template specified, ask user
    if [ -z "$template" ]; then
        # Show template list first
        show_template_list "$auth_type"
        echo -e "${YELLOW}Note: Selected template will be installed as .github/workflows/claude.yml${NC}"
        echo ""
        # Then get selection
        template=$(get_template_selection "$auth_type")
    fi
    
    # Special handling for advanced templates
    if [ "$template" = "claude-advanced.yml" ] || [ "$template" = "claude-advanced-api.yml" ]; then
        # Check auth type compatibility
        if [ "$template" = "claude-advanced.yml" ] && [ "$auth_type" != "oauth" ]; then
            echo -e "${RED}Error: Advanced OAuth template requires OAuth authentication${NC}"
            echo "Run: claude-auth setup --auth-type=oauth"
            return 1
        fi
        
        if [ "$template" = "claude-advanced-api.yml" ] && [ "$auth_type" != "api" ]; then
            echo -e "${RED}Error: Advanced API template requires API key authentication${NC}"
            echo "Run: claude-auth setup --auth-type=api"
            return 1
        fi
        
        # Use local advanced template
        local local_template="$HOME/.claude-action-auth/$template"
        if [ -f "$local_template" ]; then
            cp "$local_template" .github/workflows/claude.yml
            echo -e "${GREEN}âœ“ Advanced workflow installed: $template â†’ .github/workflows/claude.yml${NC}"
            return 0
        else
            echo -e "${RED}Error: Template not found: $template${NC}"
            return 1
        fi
    fi
    
    # Download from claude-code-action repository
    local workflow_url=""
    
    if [ "$auth_type" = "oauth" ]; then
        # Download from OAuth branch for OAuth workflows
        workflow_url="https://raw.githubusercontent.com/hikarubw/claude-code-action/oauth/examples/${template}"
    else
        # Download from original repository for API workflows
        workflow_url="https://raw.githubusercontent.com/anthropics/claude-code-action/beta/examples/${template}"
    fi
    
    echo "Downloading ${template}..."
    
    if curl -fsSL "$workflow_url" -o .github/workflows/claude.yml 2>/dev/null; then
        # No transformation needed for OAuth branch files
        echo -e "${GREEN}âœ“ Workflow installed: ${template} â†’ .github/workflows/claude.yml${NC}"
        return 0
    else
        echo -e "${RED}Failed to download workflow template${NC}"
        return 1
    fi
}

# Setup API Key
setup_api_key() {
    local from_init="$1"
    
    echo -e "${BLUE}Setting up Claude API Key authentication...${NC}"
    echo ""
    
    # Check if in git repo
    if [ ! -d ".git" ]; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
    
    # Check GitHub CLI auth
    if ! gh auth status &>/dev/null; then
        echo -e "${RED}Error: GitHub CLI not authenticated${NC}"
        echo "Run: gh auth login"
        exit 1
    fi
    
    # Instructions for API key
    echo ""
    echo -e "${YELLOW}=== Manual Step Required ===${NC}"
    echo ""
    echo "You need to add your Anthropic API key to GitHub secrets:"
    echo ""
    echo "1. Get your API key from: https://console.anthropic.com/account/keys"
    echo ""
    echo "2. Add it to your repository:"
    echo "   Option A - Using GitHub CLI:"
    echo "   echo 'your-api-key-here' | gh secret set ANTHROPIC_API_KEY --repo \"$(gh repo view --json nameWithOwner -q .nameWithOwner)\""
    echo ""
    echo "   Option B - Using GitHub web interface:"
    echo "   - Go to: https://github.com/$(gh repo view --json nameWithOwner -q .nameWithOwner)/settings/secrets/actions"
    echo "   - Click 'New repository secret'"
    echo "   - Name: ANTHROPIC_API_KEY"
    echo "   - Value: Your API key"
    echo ""
    echo -e "${GREEN}=== API Key Setup Complete! ===${NC}"
    
    # Only show next steps if not called from init
    if [ "$from_init" != "from_init" ]; then
        echo ""
        echo "Next steps:"
        echo "1. Run: claude-auth install"
        echo "2. Select a workflow template"
        echo "3. Commit and push changes"
        echo ""
        echo "Claude will respond to @claude mentions in Issues and PRs!"
    fi
}

# Setup OAuth
setup_oauth() {
    local from_init="$1"
    
    echo -e "${BLUE}Setting up Claude OAuth...${NC}"
    echo ""
    
    # Check if in git repo
    if [ ! -d ".git" ]; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
    
    # Check GitHub CLI auth
    if ! gh auth status &>/dev/null; then
        echo -e "${RED}Error: GitHub CLI not authenticated${NC}"
        echo "Run: gh auth login"
        exit 1
    fi
    
    # Get credentials
    get_claude_credentials
    
    # Set GitHub secrets
    echo ""
    echo "Configuring GitHub repository secrets..."
    local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner)
    
    echo "$ACCESS_TOKEN" | gh secret set CLAUDE_ACCESS_TOKEN --repo "$repo"
    echo "$REFRESH_TOKEN" | gh secret set CLAUDE_REFRESH_TOKEN --repo "$repo"
    echo "$EXPIRES_AT" | gh secret set CLAUDE_EXPIRES_AT --repo "$repo"
    
    echo -e "${GREEN}âœ“ Secrets configured${NC}"
    
    # Success message
    echo ""
    echo -e "${GREEN}=== OAuth Setup Complete! ===${NC}"
    
    # Only show next steps if not called from init
    if [ "$from_init" != "from_init" ]; then
        echo ""
        echo "Next steps:"
        echo "1. Run: claude-auth install"
        echo "2. Select a workflow template"
        echo "3. Commit and push changes"
        echo ""
        echo "Claude will respond to @claude mentions in Issues and PRs!"
    fi
}

# Main setup function
setup() {
    local auth_type="$1"
    local from_init="$2"
    
    # If no auth type specified, ask
    if [ -z "$auth_type" ]; then
        auth_type=$(ask_auth_type)
    fi
    
    case "$auth_type" in
        oauth)
            setup_oauth "$from_init"
            ;;
        api)
            setup_api_key "$from_init"
            ;;
        *)
            echo -e "${RED}Invalid auth type: $auth_type${NC}"
            echo "Valid options: oauth, api"
            exit 1
            ;;
    esac
}

# Test configuration
test_configuration() {
    echo -e "${BLUE}Testing Claude configuration...${NC}"
    echo ""
    
    local passed=0
    local failed=0
    local auth_type=""
    
    # Test 1: Git repository
    echo -n "Git repository check... "
    if [ -d ".git" ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 2: Workflow exists
    echo -n "Workflow file check... "
    if [ -f ".github/workflows/claude.yml" ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
        
        # Detect auth type from workflow
        if grep -q "ANTHROPIC_API_KEY" .github/workflows/claude.yml; then
            auth_type="api"
        elif grep -q "CLAUDE_ACCESS_TOKEN" .github/workflows/claude.yml; then
            auth_type="oauth"
        fi
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 3: GitHub CLI auth
    echo -n "GitHub CLI authentication... "
    if gh auth status &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 4: Secrets exist (based on auth type)
    echo -n "GitHub secrets check... "
    local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null)
    if [ -n "$repo" ]; then
        if [ "$auth_type" = "api" ]; then
            if gh secret list --repo "$repo" | grep -q "ANTHROPIC_API_KEY"; then
                echo -e "${GREEN}PASS (API key)${NC}"
                ((passed++))
            else
                echo -e "${RED}FAIL (ANTHROPIC_API_KEY not found)${NC}"
                ((failed++))
            fi
        elif [ "$auth_type" = "oauth" ]; then
            if gh secret list --repo "$repo" | grep -q "CLAUDE_ACCESS_TOKEN"; then
                echo -e "${GREEN}PASS (OAuth)${NC}"
                ((passed++))
            else
                echo -e "${RED}FAIL (OAuth tokens not found)${NC}"
                ((failed++))
            fi
        else
            echo -e "${YELLOW}SKIP (unknown auth type)${NC}"
        fi
    else
        echo -e "${YELLOW}SKIP (could not determine repository)${NC}"
    fi
    
    # Test 5: Claude credentials (only for OAuth)
    if [ "$auth_type" = "oauth" ]; then
        echo -n "Claude credentials check... "
        get_claude_credentials &>/dev/null
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}PASS${NC}"
            ((passed++))
        else
            echo -e "${RED}FAIL${NC}"
            ((failed++))
        fi
    fi
    
    # Summary
    echo ""
    echo "===================="
    if [ -n "$auth_type" ]; then
        echo "Auth type: $auth_type"
    fi
    echo -e "Tests passed: ${GREEN}$passed${NC}"
    echo -e "Tests failed: ${RED}$failed${NC}"
    
    if [ $failed -eq 0 ]; then
        echo -e "${GREEN}All tests passed!${NC}"
        return 0
    else
        echo -e "${RED}Some tests failed!${NC}"
        return 1
    fi
}

# Init command - combines setup and install
init() {
    local auth_type="$1"
    local template="$2"
    
    echo -e "${BLUE}Claude Auth Init - Setting up Claude Code Action${NC}"
    echo ""
    
    # Check if already configured
    local has_oauth=false
    local has_api=false
    
    if gh auth status &>/dev/null; then
        if gh secret list 2>/dev/null | grep -q "CLAUDE_ACCESS_TOKEN"; then
            has_oauth=true
        fi
        if gh secret list 2>/dev/null | grep -q "ANTHROPIC_API_KEY"; then
            has_api=true
        fi
    fi
    
    # If already configured, ask if they want to reconfigure
    if [ "$has_oauth" = true ] || [ "$has_api" = true ]; then
        echo -e "${YELLOW}Authentication already configured.${NC}"
        echo -n "Do you want to reconfigure? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo ""
            echo "Proceeding to workflow installation..."
            # Skip to workflow installation
            install_workflow "$auth_type" "$template"
            return
        fi
    fi
    
    # Run setup
    echo ""
    echo -e "${BLUE}Step 1/2: Configuring authentication...${NC}"
    echo ""
    setup "$auth_type" "from_init"
    
    # Check if setup was successful
    if [ $? -ne 0 ]; then
        echo -e "${RED}Setup failed. Please try again.${NC}"
        return 1
    fi
    
    # Determine auth type if not specified
    if [ -z "$auth_type" ]; then
        if gh secret list 2>/dev/null | grep -q "CLAUDE_ACCESS_TOKEN"; then
            auth_type="oauth"
        elif gh secret list 2>/dev/null | grep -q "ANTHROPIC_API_KEY"; then
            auth_type="api"
        fi
    fi
    
    # Run install
    echo ""
    echo -e "${BLUE}Step 2/2: Installing workflow...${NC}"
    echo ""
    install_workflow "$auth_type" "$template"
    
    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}âœ… Claude Code Action setup complete!${NC}"
        echo ""
        echo "Claude will now respond to @claude mentions in your Issues and PRs."
        echo ""
        echo "Next steps:"
        echo "1. Commit and push the workflow file"
        echo "2. Create an issue or PR and mention @claude"
        echo ""
        echo "Example: '@claude please review this code'"
    fi
}

# Uninstall
uninstall() {
    echo -e "${YELLOW}Uninstalling Claude authentication...${NC}"
    echo ""
    
    # Detect auth type from workflow
    local auth_type=""
    if [ -f ".github/workflows/claude.yml" ]; then
        if grep -q "ANTHROPIC_API_KEY" .github/workflows/claude.yml; then
            auth_type="api"
        elif grep -q "CLAUDE_ACCESS_TOKEN" .github/workflows/claude.yml; then
            auth_type="oauth"
        fi
    fi
    
    # Remove secrets
    if gh auth status &>/dev/null; then
        echo "Removing GitHub secrets..."
        local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null)
        if [ -n "$repo" ]; then
            if [ "$auth_type" = "api" ]; then
                gh secret delete ANTHROPIC_API_KEY --repo "$repo" 2>/dev/null || true
            else
                gh secret delete CLAUDE_ACCESS_TOKEN --repo "$repo" 2>/dev/null || true
                gh secret delete CLAUDE_REFRESH_TOKEN --repo "$repo" 2>/dev/null || true
                gh secret delete CLAUDE_EXPIRES_AT --repo "$repo" 2>/dev/null || true
            fi
        else
            echo "Warning: Could not determine repository, skipping secret removal"
        fi
    fi
    
    # Remove workflow
    if [ -f ".github/workflows/claude.yml" ]; then
        echo "Removing workflow file..."
        rm -f .github/workflows/claude.yml
        
        # Restore backup if exists
        if [ -f ".github/workflows/claude.yml.bak" ]; then
            echo "Restoring backup..."
            mv .github/workflows/claude.yml.bak .github/workflows/claude.yml
        fi
    fi
    
    echo -e "${GREEN}âœ“ Uninstall complete${NC}"
}

# Main execution
main() {
    # Parse arguments
    local command=""
    local auth_type=""
    local template=""
    
    for arg in "$@"; do
        case "$arg" in
            --auth-type=*)
                auth_type="${arg#*=}"
                ;;
            --template=*)
                template="${arg#*=}"
                ;;
            --version)
                echo "claude-auth v${VERSION}"
                exit 0
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            init|setup|install|test|uninstall|help)
                command="$arg"
                ;;
            --oauth)
                auth_type="oauth"
                ;;
            --api-key|--api)
                auth_type="api"
                ;;
            *)
                if [ -z "$command" ]; then
                    echo -e "${RED}Unknown command: $arg${NC}"
                    echo "Run 'claude-auth help' for usage"
                    exit 1
                fi
                ;;
        esac
    done
    
    # Default to help if no command
    if [ -z "$command" ]; then
        command="help"
    fi
    
    # Execute command
    case "$command" in
        init)
            check_dependencies
            init "$auth_type" "$template"
            ;;
        setup)
            check_dependencies
            setup "$auth_type"
            ;;
        install)
            check_dependencies
            # Detect auth type from secrets if not specified
            if [ -z "$auth_type" ]; then
                if gh secret list 2>/dev/null | grep -q "CLAUDE_ACCESS_TOKEN"; then
                    auth_type="oauth"
                elif gh secret list 2>/dev/null | grep -q "ANTHROPIC_API_KEY"; then
                    auth_type="api"
                else
                    echo -e "${YELLOW}No authentication configured. Run 'claude-auth setup' first.${NC}"
                    auth_type=$(ask_auth_type)
                fi
            fi
            install_workflow "$auth_type" "$template"
            ;;
        test)
            test_configuration
            ;;
        uninstall)
            uninstall
            ;;
        help)
            show_help
            ;;
    esac
}

# Run main function
main "$@"